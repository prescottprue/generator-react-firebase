name: Deploy

on:
  push:
    branches:
      - master
      - prod

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    if: github.actor != 'dependabot[bot]'
    timeout-minutes: 20
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2.4.0
        with:
          node-version: 14

      - name: Get Library Versions For Binary Caching
        id: cache-settings
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache App Dependencies
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.cache-settings.outputs.dir }}
          key: ${{ runner.os }}-app-${{ hashFiles('yarn.lock') }}

      - name: Install Dependencies
        env:
          CYPRESS_INSTALL_BINARY: 0 # Skip install of Cypress (handled in its own job)
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
        run: |
          yarn install --frozen-lockfile
          yarn --cwd functions install --frozen-lockfile

      - name: Set environment
        run: |
          # Get branch name from github ref (i.e. refs/heads/master -> master)
          gitBranch=${GITHUB_REF##*/}

          # Find the config associated to the firebase project in .firebaserc (falling back to default)
          gcloudProject=$(cat .firebaserc | jq -r --arg alias "$gitBranch" '.projects[$alias] // .projects.default')
          appName=react-firebase

          echo "Setting environment for branch: $gitBranch, project: $gcloudProject, and app: $appName..."

          # Set variables to environment to be used in later steps
          echo "GCLOUD_PROJECT=$gcloudProject" >> $GITHUB_ENV
          echo "NODE_CONFIG_ENV=$branch" >> $GITHUB_ENV
          echo "ENV=$branch" >> $GITHUB_ENV

      - name: Generate Firebase SDK config for ${{ env.GCLOUD_PROJECT }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          set -o pipefail

          # Throw a clear error if FIREBASE_TOKEN secret is not set
          if [ -z "$FIREBASE_TOKEN" ];
            then
              missingTokenErrMsg="\"FIREBASE_TOKEN\" github secret is required to load project configuration. Visit https://github.com/${{ github.repository }}/settings/secrets to set."
              echo "::error ::$missingTokenErrMsg"
              exit 1
          fi

          bin/generate-firebase-sdk-config.js --file ./config/default.json

      - name: Verify App
        run: |
          yarn lint # Check for lint in app code

      - name: Build Functions
        run: |
          yarn functions:build

      - name: Build App
        run: |
          yarn build

      # Archive build in case it needs to be downloaded later for debugging
      - name: Archive Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        # Deploy to project associated with branch name alias in .firebaserc with message set to commit's message.
        # Force flag is used to automatically delete any removed cloud functions
        run: |
          $(yarn bin)/firebase-ci deploy -s --force

      # Archive debug logs if deploy fails
      - name: Archive Debug Logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: debug-logs
          path: ./*.log

      - name: Check if version has been updated
        if: github.ref == 'refs/heads/prod'
        id: check
        uses: EndBug/version-check@v2.0.1

      - name: Create Github Release
        if: github.ref == 'refs/heads/prod' && steps.check.outputs.changed == 'true'
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false
