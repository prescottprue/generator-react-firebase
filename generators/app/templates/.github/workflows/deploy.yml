name: Deploy

on:
  push:
    branches:
      - master
      - prod

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12<% if(useYarn) { %>

      - name: Get Library Versions For Binary Caching
        id: cache-settings
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"<% if(includeFunctionsTests) { %>
          echo "::set-output name=firebase-tools::$(yarn list -s --depth=0 --pattern firebase-tools | tail -n 1 | sed 's/.*@//g')"

      - name: Cache Firebase Emulator Binaries
        uses: actions/cache@v1
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-${{ steps.cache-settings.outputs.firebase-tools }}<% } %><% } %>

      - name: Cache App Dependencies
        uses: actions/cache@v1
        with:
          path: <% if(!useYarn) { %>~/.npm<% } else { %>${{ steps.cache-settings.outputs.dir }}<% } %>
          key: ${{ runner.os }}-app-${{ hashFiles('<% if(useYarn) { %>yarn.lock<% } else { %>package-lock.json<% } %>') }}

      - name: Install Dependencies
        env:
          CYPRESS_INSTALL_BINARY: 0 # Skip install of Cypress (handled in its own job)
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
        run: |
          <% if(useYarn) { %>yarn install --frozen-lockfile<% } else { %>npm ci --loglevel error<% } %>
          <% if(useYarn) { %>yarn --cwd functions install --frozen-lockfile<% } else { %>npm --prefix functions ci --loglevel error<% } %>

      - name: Set App Environment Settings
        env:
          MASTER_SERVICE_ACCOUNT: ${{ secrets.MASTER_SERVICE_ACCOUNT }}
          PROD_SERVICE_ACCOUNT: ${{ secrets.PROD_SERVICE_ACCOUNT }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          set -o pipefail

          # Throw a clear error if FIREBASE_TOKEN secret is not set
          if [ -z "$FIREBASE_TOKEN" ];
            then
              errMsg="\"FIREBASE_TOKEN\" github secret is required to load project configuration. Visit https://github.com/${{ github.repository }}/settings/secrets to set."
              echo "::error ::$errMsg"
              exit 1
          fi

          # Get branch name from github ref (i.e. refs/heads/master -> master)
          gitBranch=${GITHUB_REF##*/}

          # Find the config associated to the firebase project in .firebaserc (falling back to default)
          gcloudProject=$(cat .firebaserc | jq -r --arg alias "$gitBranch" '.projects[$alias] // .projects.default')
          appName=<%= appName %>
          echo "Setting environment for branch: $gitBranch, project: $gcloudProject, and app: $appName..."

          # Set variables to environment to be used in later steps
          echo "::set-env name=GCLOUD_PROJECT::$gcloudProject"

          # Get value of Service Account associated with branch (i.e. STAGE_SERVICE_ACCOUNT)
          branchPrefix=$(echo $gitBranch | tr a-z A-Z | tr - _)
          branchSaKey="${branchPrefix}_SERVICE_ACCOUNT"
          branchSa=$(eval echo \$${branchSaKey})
          if [[ ! -z "${branchSa}" ]]; then
            echo Using service account with key \"$branchSaKey\"
            serviceAccount=$branchSa
          else
            echo Falling back to service account with key "DEVELOP_SERVICE_ACCOUNT"
            serviceAccount=$DEVELOP_SERVICE_ACCOUNT
          fi

          echo "Service Account selected for projectId $(echo $serviceAccount | jq .project_id)"

          # Generate Service Account file required to prevent credential error during functions unit tests (jq used to format)
          echo "Generating Service Account File..."
          echo "$(echo $serviceAccount | jq .)" > $HOME/serviceAccount.json
          echo "::set-env name=GOOGLE_APPLICATION_CREDENTIALS::$HOME/serviceAccount.json"

          # Use Firebase SDK API to get the app's configuration and export to REACT_APP prefixed environment variables
          # NOTE: databaseURL is intentionally removed since it is set above
          firebaseConfig=$(npx firebase --project $gcloudProject apps:sdkconfig WEB \
            $(npx firebase --project $gcloudProject apps:list WEB | grep $appName | awk '{ print $4}') | \
              tr '\n' ' ' | \
              sed 's/.*initializeApp(//g' | \
              sed 's/);//g' | \
              jq -r 'to_entries[] | [.key, (.value | tojson)] | join("::")' | \
              sed 's/:"/:/g; s/^/echo \"::set-env name=REACT_APP_FIREBASE_/g' \
          )

          # Loop through each line of config and evaluate to export env vars
          while IFS= read -r line; do
            echo Evaluating: $line
            eval $line
          done <<< "$firebaseConfig"

      - name: Verify App
        run: |
          <% if(useYarn) { %>yarn<% } else { %>npm run<% } %> lint # Check for lint in app code<% if(includeFunctionsTests) { %>

      # NOTE: Skipped because of "Channel credentials must be a ChannelCredentials object" error from firebase-admin
      # See https://github.com/firebase/firebase-tools/issues/2207 for more info
      # - name: Unit Test Functions
      #   run: |
      #     <% if(useYarn) { %>yarn<% } else { %>npm run<% } %> functions:test:cov -- --project $GCLOUD_PROJECT # Run unit tests with coverage

      # - name: Upload Test Coverage For Functions
      #   # NOTE: Token will need to be added if using codecov with private repos
      #   run: |
      #     bash <(curl -s https://codecov.io/bash) -f functions/coverage/lcov.info || echo 'Codecov failed to upload'<% } %>

      - name: Build Functions
        run: |
          <% if(useYarn) { %>yarn<% } else { %>npm run<% } %> functions:build

      - name: Build App
        run: |
          <% if(useYarn) { %>yarn<% } else { %>npm run<% } %> build

      # Archive build in case it needs to be downloaded later for debugging
      - name: Archive Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        # Deploy to project associated with branch name alias in .firebaserc.
        # Force flag is used to automatically delete any removed cloud functions
        run: |
          $(<% if(useYarn) { %>yarn<% } else { %>npm<% } %> bin)/firebase-ci deploy -s --force

      - name: Check if version has been updated
        if: github.ref == 'refs/heads/prod'
        id: check
        uses: EndBug/version-check@v1

      - name: Create Github Release
        if: github.ref == 'refs/heads/prod' && steps.check.outputs.changed == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false<% if(includeSentry) { %>

      - name: Create Sentry Release
        if: github.ref == 'refs/heads/prod' && steps.check.outputs.changed == 'true'
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: <%= githubUser %>
          SENTRY_PROJECT: <%= appName %>
        run: |
          # Throw a clear error if SENTRY_AUTH_TOKEN secret is not set
          if [ -z "$SENTRY_AUTH_TOKEN" ];
            then
              warningMsg="\"SENTRY_AUTH_TOKEN\" github secret is required to create releases in Sentry. Visit https://github.com/${{ github.repository }}/settings/secrets to set."
              echo "::warning ::$warningMsg"
              exit 0
          fi
          gitBranch=${GITHUB_REF##*/}
          releaseSuffix=$(if [ $gitBranch != "prod" ]; then echo $gitBranch; fi;)@$PACKAGE_VERSION
          releaseName=<%= appName %>-$releaseSuffix

          echo Creating Sentry release \"$releaseName\" for project \"$SENTRY_PROJECT\"...
          $(yarn bin)/sentry-cli releases new $releaseName --finalize

          echo Uploading source maps to Sentry release...
          $(yarn bin)/sentry-cli releases files $releaseName upload-sourcemaps ./build/static/js --no-rewrite

          echo Associating commits with the Sentry release...
          $(yarn bin)/sentry-cli releases set-commits --auto $PACKAGE_VERSION<% } %>
