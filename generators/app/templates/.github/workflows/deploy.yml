name: Deploy

on:
  push:
    branches:
      - master
      - prod

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10<% if(useYarn) { %>

      - name: Get Library Versions For Binary Caching
        id: cache-settings
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"<% if(includeFunctionsTests) { %>
          echo "::set-output name=firebase-tools::$(yarn list -s --depth=0 --pattern firebase-tools | tail -n 1 | sed 's/.*@//g')"

      - name: Cache Firebase Emulator Binaries
        uses: actions/cache@v1
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-${{ steps.cache-settings.outputs.firebase-tools }}<% } %>

      - name: Cache App Dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.cache-settings.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - name: Install Dependencies
        env:
          CYPRESS_INSTALL_BINARY: 0 # Skip install of Cypress (handled in its own job)
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
        run: |
          yarn install --frozen-lockfile
          yarn --cwd functions install --frozen-lockfile

      - name: Set App Environment Settings
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          set -o pipefail

          # Throw a clear error if FIREBASE_TOKEN secret is not set
          if [ -z "$FIREBASE_TOKEN" ];
            then
              errMsg="\"FIREBASE_TOKEN\" github secret is required to load project configuration. Visit https://github.com/${{ github.repository }}/settings/secrets to set."
              echo "::error ::$errMsg"
              exit 1
          fi

          # Get branch name from github ref (i.e. refs/heads/master -> master)
          gitBranch=${GITHUB_REF##*/}

          # Find the config associated to the firebase project in .firebaserc (falling back to default)
          gcloudProject=$(cat .firebaserc | jq -r --arg alias "$projectAlias" '.projects[$alias] // .projects.default')
          appName=<%= appName %>

          echo Setting configuration from the \"$gcloudProject\" Firebase Project and \"$appName\" App...

          echo "::set-env name=GCLOUD_PROJECT::$gcloudProject"

          # Use firebase SDK API to get the app's configuration and export to CYPRESS. NOTE: databaseURL is intentionally removed
          firebaseConfig=$(npx firebase --project $gcloudProject apps:sdkconfig WEB \
            $(npx firebase --project $gcloudProject apps:list WEB | grep $appName | awk '{ print $4}') | \
              tr '\n' ' ' | \
              sed 's/.*initializeApp(//g' | \
              sed 's/);//g' | \
              jq -r 'to_entries[] | [.key, (.value | tojson)] | join("::")' | \
              sed 's/:"/:/g; s/^/echo \"::set-env name=REACT_APP_FIREBASE_/g' \
          )

          # Loop through each line of config and evaluate to export env vars
          while IFS= read -r line; do
            echo Evaluating: $line
            eval $line
          done <<< "$firebaseConfig"

      - name: Verify App
        run: |
          yarn lint # Check for lint in app code
          yarn build # Build app bundles

      - name: Verify Functions
        run: |
          <% if(includeFunctionsTests) { %>yarn functions:test:cov # Run unit tests with coverage
          <% } %>yarn functions:build<% } %><% if(includeFunctionsTests) { %>

      - name: Upload Test Coverage For Functions
        run: |
          bash <(curl -s https://codecov.io/bash) -f functions/coverage/lcov.info || echo 'Codecov failed to upload'<% } %><% if(!useYarn) { %>

      - name: Dependencies Cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        env:
          CYPRESS_INSTALL_BINARY: 0 # Skip installing of Cypress (handled in its own job)
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
        run: |
          npm ci
          npm --prefix functions ci

      - name: Set App Environment Settings
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          set -o pipefail

          # Throw a clear error if FIREBASE_TOKEN secret is not set
          if [ -z "$FIREBASE_TOKEN" ];
            then
              errMsg="\"FIREBASE_TOKEN\" github secret is required to load project configuration. Visit https://github.com/${{ github.repository }}/settings/secrets to set."
              echo "::error ::$errMsg"
              exit 1
          fi

          # Get branch name from github ref (i.e. refs/heads/master -> master)
          gitBranch=${GITHUB_REF##*/}

          # Find the config associated to the firebase project in .firebaserc (falling back to default)
          gcloudProject=$(cat .firebaserc | jq -r --arg alias "$projectAlias" '.projects[$alias] // .projects.default')
          appName=<%= appName %>

          echo Setting configuration from the \"$gcloudProject\" Firebase Project and \"$appName\" App...

          echo "::set-env name=GCLOUD_PROJECT::$gcloudProject"

          # Use firebase SDK API to get the app's configuration and export to CYPRESS. NOTE: databaseURL is intentionally removed
          firebaseConfig=$(npx firebase --project $gcloudProject apps:sdkconfig WEB \
            $(npx firebase --project $gcloudProject apps:list WEB | grep $appName | awk '{ print $4}') | \
              tr '\n' ' ' | \
              sed 's/.*initializeApp(//g' | \
              sed 's/);//g' | \
              jq -r 'to_entries[] | [.key, (.value | tojson)] | join("::")' | \
              sed 's/:"/:/g; s/^/echo \"::set-env name=REACT_APP_FIREBASE_/g' \
          )

          # Loop through each line of config and evaluate to export env vars
          while IFS= read -r line; do
            echo Evaluating: $line
            eval $line
          done <<< "$firebaseConfig"

      - name: Verify App
        run: |
          npm run lint # Check for lint in app code
          npm run build # Build app bundles

      - name: Verify Functions
        run: |
          <% if(includeFunctionsTests) { %>npm run functions:test:cov # Run unit tests with coverage
          <% } %>npm run functions build<% } %>

      # Archive build in case it needs to be downloaded later for debugging
      - name: Archive Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        # Deploy to project associated with branch name alias in .firebaserc.
        # Force flag is used to automatically delete any removed cloud functions
        run: |
          $(<% if(useYarn) { %>yarn<% } else { %>npm<% } %> bin)/firebase-ci deploy -s --force
          echo "::set-env name=PACKAGE_VERSION::$(cat package.json | jq -r '.version')"

      <% if(includeSentry) { %># TODO: Uncomment after setting SENTRY_AUTH_TOKEN secret and confirming org and project name
      # - name: Upload SourceMaps to Sentry
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_ORG: <%= githubUser %>
      #     SENTRY_PROJECT: <%= appName %>
      #   run: |
      #     gitBranch=${GITHUB_REF##*/}
      #     envName=$(if [ $gitBranch == "master" ]; then echo staging; else echo $gitBranch; fi;)
      #     releaseSuffix=$envName@$PACKAGE_VERSION
      #     releaseName=<%= appName %>-$releaseSuffix
      #     echo Creating Sentry release \"$releaseName\" for project \"$SENTRY_PROJECT\"...
      #     $(yarn bin)/sentry-cli releases new $releaseName --finalize
      #     echo Uploading source maps to Sentry release...
      #     $(yarn bin)/sentry-cli releases files $releaseName upload-sourcemaps ./build/static/js --no-rewrite
      #     echo Associating commits with the Sentry release...
      #     $(yarn bin)/sentry-cli releases set-commits --auto $version<% } %>

      - name: Check if version has been updated
        if: github.ref == 'refs/heads/prod'
        id: check
        uses: EndBug/version-check@v1

      - name: Create Release
        if: github.ref == 'refs/heads/prod' && steps.check.outputs.changed == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false
