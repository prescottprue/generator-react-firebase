name: Verify App

on: [pull_request]

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10<% if(useYarn) { %>

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache npm dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-app-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        env:
          CI: true
          CYPRESS_INSTALL_BINARY: 0 # Skip install of Cypress (handled in its own job)
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
        run: |
          yarn install --frozen-lockfile
          yarn --cwd functions install --frozen-lockfile

      - name: Set Environment Settings
        run: |
          echo "Setting emulator settings to environment..."
          echo "::set-env name=REACT_APP_FIREBASE_DATABASE_EMULATOR_HOST::localhost:$(cat firebase.json | jq .emulators.database.port)"
          echo "::set-env name=REACT_APP_FIRESTORE_EMULATOR_HOST::localhost:$(cat firebase.json | jq .emulators.firestore.port)"

      - name: Verify App
        run: |
          yarn build:config # Create env specific src/config.js
          yarn lint # Check for lint in app code
          yarn build # Build app bundles

      - name: Verify Functions
        run: |
          <% if(includeFunctionsTests) { %>yarn --cwd functions test:cov # Run unit tests with coverage
          <% } %>yarn --cwd functions build<% } %><% if(!useYarn) { %>
      
      - name: Dependencies Cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        env:
          CI: true
          CYPRESS_INSTALL_BINARY: 0 # Skip installing of Cypress (handled in its own job)
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
          run: npm ci --loglevel error

      - name: Set Environment Settings
        run: |
          echo "Setting emulator settings to environment..."
          echo "::set-env name=REACT_APP_FIREBASE_DATABASE_EMULATOR_HOST::localhost:$(cat firebase.json | jq .emulators.database.port)"
          echo "::set-env name=REACT_APP_FIRESTORE_EMULATOR_HOST::localhost:$(cat firebase.json | jq .emulators.firestore.port)"

      - name: Verify App
        run: |
          npm run build:config # Create env specific src/config.js
          npm run lint # Check for lint in app code
          npm run build # Build app bundles

      - name: Verify Functions
        run: |
          <% if(includeFunctionsTests) { %>npm run --prefix functions test:cov # Run unit tests with coverage
          <% } %>npm run --prefix functions build<% } %>

      - name: Archive Build Artifact
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build

      - name: Archive Functions Artifact
        uses: actions/upload-artifact@master
        with:
          name: functions-build
          path: functions/dist<% if(includeUiTests) { %>

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-16.04
    needs: verify
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Get Library Versions For Binary Caching
        id: cache-settings
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=firebase-tools::$(yarn info firebase-tools version --silent)"
          echo "::set-output name=cypress::$(yarn info cypress version --silent)"

      - name: Cache Firebase Emulator Binaries
        uses: actions/cache@v1
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-${{ steps.cache-settings.outputs.firebase-tools }}

      - name: Cache Cypress Binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ steps.cache-settings.outputs.cypress }}

      - name: Cache App Dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.cache-settings.outputs.dir }}
          key: ${{ runner.os }}-app-${{ hashFiles('yarn.lock') }}

      - name: Install Dependencies
        env:
          CI: true
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
        run: |
          <% if(useYarn) { %>yarn install --frozen-lockfile<% } else { %>npm ci<% } %>
          $(<% if(useYarn) { %>yarn<% } else { %>npm<% } %> bin)/cypress verify

      - name: Set Test Environment Settings
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
          FIREBASE_APP_NAME: ${{ secrets.FIREBASE_APP_NAME }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          set -o pipefail

          export GIT_BRANCH=${GITHUB_REF##*/}
          export GCLOUD_PROJECT=$(cat .firebaserc | jq -r --arg GIT_BRANCH "$GIT_BRANCH" '.projects[$GIT_BRANCH] // .projects.default')
          echo "::set-env name=GCLOUD_PROJECT::$GCLOUD_PROJECT"
          echo "Environment set for branch: $GIT_BRANCH and project: $GCLOUD_PROJECT"
  
          echo "Setting emulator settings to environment..."
          export FIREBASE_DATABASE_EMULATOR_HOST=localhost:$(cat firebase.json | jq .emulators.database.port)
          export FIRESTORE_EMULATOR_HOST=localhost:$(cat firebase.json | jq .emulators.firestore.port)
          echo "::set-env name=FIREBASE_DATABASE_EMULATOR_HOST::$FIREBASE_DATABASE_EMULATOR_HOST"
          echo "::set-env name=FIRESTORE_EMULATOR_HOST::$FIRESTORE_EMULATOR_HOST"
          echo "::set-env name=CYPRESS_BASE_URL::http://localhost:$(cat package.json | jq .config.port)"
          echo "::set-env name=CYPRESS_FB_databaseURL::http://$FIREBASE_DATABASE_EMULATOR_HOST?ns=$GCLOUD_PROJECT"
  
          echo "Generating Service Account File..."
          echo "$(echo $SERVICE_ACCOUNT | jq .)" > $HOME/serviceAccount.json
          echo "::set-env name=GOOGLE_APPLICATION_CREDENTIALS::$HOME/serviceAccount.json"

          # Use firebase SDK API to get the app's configuration and export to CYPRESS. NOTE: databaseURL is intentionally removed
          firebaseConfig=$(npx firebase --project $GCLOUD_PROJECT apps:sdkconfig WEB \
            $(npx firebase --project $GCLOUD_PROJECT apps:list WEB | grep $FIREBASE_APP_NAME | awk '{ print $4}') | \
              tr '\n' ' ' | \
              sed 's/.*initializeApp(//g' | \
              sed 's/);//g' | \
              jq -r 'del(.databaseURL) | to_entries[] | [.key, (.value | tojson)] | join("::")' | \
              sed 's/:"/:/g; s/^/echo \"::set-env name=CYPRESS_FB_/g' \
          )

          # Loop through each line of config and evaluate to export env vars
          while IFS= read -r line; do
            echo Evaluating: $line
            eval $line
          done <<< "$firebaseConfig"

      # Download Built app since we are testing locally
      - name: Download Build Artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: build

      # Cypress action manages installing/caching npm dependencies and Cypress binary.
      # This stage tests a version of the app which is running locally in the
      # container on port 3000.
      - name: Cypress Run
        uses: cypress-io/github-action@v1
        with:
          record: true
          group: 'E2E Tests'
          start: <% if(useYarn) { %>yarn<% } else { %>npm run<% } %> emulate --project $GCLOUD_PROJECT
          wait-on: http://localhost:3000
          # wait for 3 minutes for the server to respond
          wait-on-timeout: 180
        env:
          CI: true
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_KEY }}
          CYPRESS_TEST_UID: ${{ secrets.TEST_UID }}
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}<% } %>
